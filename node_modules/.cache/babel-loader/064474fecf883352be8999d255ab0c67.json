{"ast":null,"code":"\"use strict\";\n\nconst {\n  isIP\n} = require(\"net\");\n\nconst execa = require(\"execa\");\n\nconst dests = new Set([\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"]);\nconst args = {\n  v4: [\"-rn\", \"-f\", \"inet\"],\n  v6: [\"-rn\", \"-f\", \"inet6\"]\n};\n\nconst parse = stdout => {\n  let result;\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = line.split(/ +/) || [];\n    const target = results[0];\n    const gateway = results[1];\n    const iface = results[5];\n\n    if (dests.has(target) && gateway && isIP(gateway)) {\n      result = {\n        gateway,\n        interface: iface ? iface : null\n      };\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = async family => {\n  const {\n    stdout\n  } = await execa(\"netstat\", args[family]);\n  return parse(stdout);\n};\n\nconst sync = family => {\n  const {\n    stdout\n  } = execa.sync(\"netstat\", args[family]);\n  return parse(stdout);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\n\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\n\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"sources":["/home/flic/test/node_modules/default-gateway/sunos.js"],"names":["isIP","require","execa","dests","Set","args","v4","v6","parse","stdout","result","trim","split","some","line","results","target","gateway","iface","has","interface","Error","promise","family","sync","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAASC,OAAO,CAAC,KAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoC,IAApC,EAA0C,MAA1C,CAAR,CAAd;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,MAAd,CADO;AAEXC,EAAAA,EAAE,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,OAAd;AAFO,CAAb;;AAKA,MAAMC,KAAK,GAAGC,MAAM,IAAI;AACtB,MAAIC,MAAJ;AAEA,GAACD,MAAM,IAAI,EAAX,EAAeE,IAAf,GAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,IAAlC,CAAuCC,IAAI,IAAI;AAC7C,UAAMC,OAAO,GAAGD,IAAI,CAACF,KAAL,CAAW,IAAX,KAAoB,EAApC;AACA,UAAMI,MAAM,GAAGD,OAAO,CAAC,CAAD,CAAtB;AACA,UAAME,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAvB;AACA,UAAMG,KAAK,GAAGH,OAAO,CAAC,CAAD,CAArB;;AACA,QAAIZ,KAAK,CAACgB,GAAN,CAAUH,MAAV,KAAqBC,OAArB,IAAgCjB,IAAI,CAACiB,OAAD,CAAxC,EAAmD;AACjDP,MAAAA,MAAM,GAAG;AAACO,QAAAA,OAAD;AAAUG,QAAAA,SAAS,EAAGF,KAAK,GAAGA,KAAH,GAAW;AAAtC,OAAT;AACA,aAAO,IAAP;AACD;AACF,GATD;;AAWA,MAAI,CAACR,MAAL,EAAa;AACX,UAAM,IAAIW,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAOX,MAAP;AACD,CAnBD;;AAqBA,MAAMY,OAAO,GAAG,MAAMC,MAAN,IAAgB;AAC9B,QAAM;AAACd,IAAAA;AAAD,MAAW,MAAMP,KAAK,CAAC,SAAD,EAAYG,IAAI,CAACkB,MAAD,CAAhB,CAA5B;AACA,SAAOf,KAAK,CAACC,MAAD,CAAZ;AACD,CAHD;;AAKA,MAAMe,IAAI,GAAGD,MAAM,IAAI;AACrB,QAAM;AAACd,IAAAA;AAAD,MAAWP,KAAK,CAACsB,IAAN,CAAW,SAAX,EAAsBnB,IAAI,CAACkB,MAAD,CAA1B,CAAjB;AACA,SAAOf,KAAK,CAACC,MAAD,CAAZ;AACD,CAHD;;AAKAgB,MAAM,CAACC,OAAP,CAAepB,EAAf,GAAoB,MAAMgB,OAAO,CAAC,IAAD,CAAjC;;AACAG,MAAM,CAACC,OAAP,CAAenB,EAAf,GAAoB,MAAMe,OAAO,CAAC,IAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,CAAepB,EAAf,CAAkBkB,IAAlB,GAAyB,MAAMA,IAAI,CAAC,IAAD,CAAnC;;AACAC,MAAM,CAACC,OAAP,CAAenB,EAAf,CAAkBiB,IAAlB,GAAyB,MAAMA,IAAI,CAAC,IAAD,CAAnC","sourcesContent":["\"use strict\";\n\nconst {isIP} = require(\"net\");\nconst execa = require(\"execa\");\nconst dests = new Set([\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"]);\n\nconst args = {\n  v4: [\"-rn\", \"-f\", \"inet\"],\n  v6: [\"-rn\", \"-f\", \"inet6\"],\n};\n\nconst parse = stdout => {\n  let result;\n\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = line.split(/ +/) || [];\n    const target = results[0];\n    const gateway = results[1];\n    const iface = results[5];\n    if (dests.has(target) && gateway && isIP(gateway)) {\n      result = {gateway, interface: (iface ? iface : null)};\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = async family => {\n  const {stdout} = await execa(\"netstat\", args[family]);\n  return parse(stdout);\n};\n\nconst sync = family => {\n  const {stdout} = execa.sync(\"netstat\", args[family]);\n  return parse(stdout);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"]},"metadata":{},"sourceType":"script"}