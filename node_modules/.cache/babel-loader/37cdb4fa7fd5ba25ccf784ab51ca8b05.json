{"ast":null,"code":"import { networkInterfaces } from 'node:os';\nimport defaultGateway from 'default-gateway';\nimport ip from 'ipaddr.js';\n\nfunction findIp(gateway) {\n  const gatewayIp = ip.parse(gateway); // Look for the matching interface in all local interfaces.\n\n  for (const addresses of Object.values(networkInterfaces())) {\n    for (const {\n      cidr\n    } of addresses) {\n      const net = ip.parseCIDR(cidr); // eslint-disable-next-line unicorn/prefer-regexp-test\n\n      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n        return net[0].toString();\n      }\n    }\n  }\n}\n\nasync function async(family) {\n  try {\n    const {\n      gateway\n    } = await defaultGateway[family]();\n    return findIp(gateway);\n  } catch {}\n}\n\nfunction sync(family) {\n  try {\n    const {\n      gateway\n    } = defaultGateway[family].sync();\n    return findIp(gateway);\n  } catch {}\n}\n\nexport async function internalIpV6() {\n  return async('v6');\n}\nexport async function internalIpV4() {\n  return async('v4');\n}\nexport function internalIpV6Sync() {\n  return sync('v6');\n}\nexport function internalIpV4Sync() {\n  return sync('v4');\n}","map":{"version":3,"sources":["/home/flic/test/node_modules/internal-ip/index.js"],"names":["networkInterfaces","defaultGateway","ip","findIp","gateway","gatewayIp","parse","addresses","Object","values","cidr","net","parseCIDR","kind","match","toString","async","family","sync","internalIpV6","internalIpV4","internalIpV6Sync","internalIpV4Sync"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,SAAhC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,EAAP,MAAe,WAAf;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACxB,QAAMC,SAAS,GAAGH,EAAE,CAACI,KAAH,CAASF,OAAT,CAAlB,CADwB,CAGxB;;AACA,OAAK,MAAMG,SAAX,IAAwBC,MAAM,CAACC,MAAP,CAAcT,iBAAiB,EAA/B,CAAxB,EAA4D;AAC3D,SAAK,MAAM;AAACU,MAAAA;AAAD,KAAX,IAAqBH,SAArB,EAAgC;AAC/B,YAAMI,GAAG,GAAGT,EAAE,CAACU,SAAH,CAAaF,IAAb,CAAZ,CAD+B,CAG/B;;AACA,UAAIC,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAH,CAAOE,IAAP,OAAkBR,SAAS,CAACQ,IAAV,EAA5B,IAAgDR,SAAS,CAACS,KAAV,CAAgBH,GAAhB,CAApD,EAA0E;AACzE,eAAOA,GAAG,CAAC,CAAD,CAAH,CAAOI,QAAP,EAAP;AACA;AACD;AACD;AACD;;AAED,eAAeC,KAAf,CAAqBC,MAArB,EAA6B;AAC5B,MAAI;AACH,UAAM;AAACb,MAAAA;AAAD,QAAY,MAAMH,cAAc,CAACgB,MAAD,CAAd,EAAxB;AACA,WAAOd,MAAM,CAACC,OAAD,CAAb;AACA,GAHD,CAGE,MAAM,CAAE;AACV;;AAED,SAASc,IAAT,CAAcD,MAAd,EAAsB;AACrB,MAAI;AACH,UAAM;AAACb,MAAAA;AAAD,QAAYH,cAAc,CAACgB,MAAD,CAAd,CAAuBC,IAAvB,EAAlB;AACA,WAAOf,MAAM,CAACC,OAAD,CAAb;AACA,GAHD,CAGE,MAAM,CAAE;AACV;;AAED,OAAO,eAAee,YAAf,GAA8B;AACpC,SAAOH,KAAK,CAAC,IAAD,CAAZ;AACA;AAED,OAAO,eAAeI,YAAf,GAA8B;AACpC,SAAOJ,KAAK,CAAC,IAAD,CAAZ;AACA;AAED,OAAO,SAASK,gBAAT,GAA4B;AAClC,SAAOH,IAAI,CAAC,IAAD,CAAX;AACA;AAED,OAAO,SAASI,gBAAT,GAA4B;AAClC,SAAOJ,IAAI,CAAC,IAAD,CAAX;AACA","sourcesContent":["import {networkInterfaces} from 'node:os';\nimport defaultGateway from 'default-gateway';\nimport ip from 'ipaddr.js';\n\nfunction findIp(gateway) {\n\tconst gatewayIp = ip.parse(gateway);\n\n\t// Look for the matching interface in all local interfaces.\n\tfor (const addresses of Object.values(networkInterfaces())) {\n\t\tfor (const {cidr} of addresses) {\n\t\t\tconst net = ip.parseCIDR(cidr);\n\n\t\t\t// eslint-disable-next-line unicorn/prefer-regexp-test\n\t\t\tif (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n\t\t\t\treturn net[0].toString();\n\t\t\t}\n\t\t}\n\t}\n}\n\nasync function async(family) {\n\ttry {\n\t\tconst {gateway} = await defaultGateway[family]();\n\t\treturn findIp(gateway);\n\t} catch {}\n}\n\nfunction sync(family) {\n\ttry {\n\t\tconst {gateway} = defaultGateway[family].sync();\n\t\treturn findIp(gateway);\n\t} catch {}\n}\n\nexport async function internalIpV6() {\n\treturn async('v6');\n}\n\nexport async function internalIpV4() {\n\treturn async('v4');\n}\n\nexport function internalIpV6Sync() {\n\treturn sync('v6');\n}\n\nexport function internalIpV4Sync() {\n\treturn sync('v4');\n}\n"]},"metadata":{},"sourceType":"module"}