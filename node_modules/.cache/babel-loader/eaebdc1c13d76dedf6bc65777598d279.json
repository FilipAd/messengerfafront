{"ast":null,"code":"var childProcess = require('child_process');\n\nvar Q = require('q');\n\nvar DEFAULT_GATEWAY_LINE_PATTERN = /\\n(?:\\s*0\\.0\\.0\\.0\\s*){2}(.*?)\\r?\\n=========/m;\n\nmodule.exports.detectLocalIpV4Address = function () {\n  return Q.nfcall(childProcess.execFile, \"route\", [\"print\", \"-4\", \"0.0.0.0\"]).spread(function (stdout, stderr) {\n    var matches = stdout.match(DEFAULT_GATEWAY_LINE_PATTERN);\n\n    if (matches) {\n      var columns = matches[1].split(/\\s+/);\n      var ipAddress = columns[1];\n      return ipAddress;\n    } else {\n      throw new Error(\"Could not find default gateway route in routing table.\");\n    }\n  });\n};","map":{"version":3,"sources":["/home/flic/messengerfafront/node_modules/local-ipv4-address/detectors/windows.js"],"names":["childProcess","require","Q","DEFAULT_GATEWAY_LINE_PATTERN","module","exports","detectLocalIpV4Address","nfcall","execFile","spread","stdout","stderr","matches","match","columns","split","ipAddress","Error"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,CAAC,GAAcD,OAAO,CAAC,GAAD,CAA1B;;AAEA,IAAIE,4BAA4B,GAAG,+CAAnC;;AAEAC,MAAM,CAACC,OAAP,CAAeC,sBAAf,GAAwC,YAAU;AAC9C,SAAOJ,CAAC,CAACK,MAAF,CAASP,YAAY,CAACQ,QAAtB,EAAgC,OAAhC,EAAyC,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,CAAzC,EACFC,MADE,CACK,UAASC,MAAT,EAAiBC,MAAjB,EAAwB;AAC5B,QAAIC,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAaV,4BAAb,CAAd;;AACA,QAAGS,OAAH,EAAW;AACP,UAAIE,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWG,KAAX,CAAiB,KAAjB,CAAd;AACA,UAAIC,SAAS,GAAGF,OAAO,CAAC,CAAD,CAAvB;AACA,aAAOE,SAAP;AACH,KAJD,MAIO;AACH,YAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;AACJ,GAVE,CAAP;AAWH,CAZD","sourcesContent":["var childProcess = require('child_process');\nvar Q            = require('q');\n\nvar DEFAULT_GATEWAY_LINE_PATTERN = /\\n(?:\\s*0\\.0\\.0\\.0\\s*){2}(.*?)\\r?\\n=========/m;\n\nmodule.exports.detectLocalIpV4Address = function(){\n    return Q.nfcall(childProcess.execFile, \"route\", [\"print\", \"-4\", \"0.0.0.0\"])\n        .spread(function(stdout, stderr){\n            var matches = stdout.match(DEFAULT_GATEWAY_LINE_PATTERN);\n            if(matches){\n                var columns = matches[1].split(/\\s+/);\n                var ipAddress = columns[1];\n                return ipAddress;\n            } else {\n                throw new Error(\"Could not find default gateway route in routing table.\");\n            }\n        });\n};"]},"metadata":{},"sourceType":"script"}