{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst crossSpawn = require('cross-spawn');\n\nconst stripFinalNewline = require('strip-final-newline');\n\nconst npmRunPath = require('npm-run-path');\n\nconst onetime = require('onetime');\n\nconst makeError = require('./lib/error');\n\nconst normalizeStdio = require('./lib/stdio');\n\nconst {\n  spawnedKill,\n  spawnedCancel,\n  setupTimeout,\n  validateTimeout,\n  setExitHandler\n} = require('./lib/kill');\n\nconst {\n  handleInput,\n  getSpawnedResult,\n  makeAllStream,\n  validateInputSync\n} = require('./lib/stream');\n\nconst {\n  mergePromise,\n  getSpawnedPromise\n} = require('./lib/promise');\n\nconst {\n  joinCommand,\n  parseCommand,\n  getEscapedCommand\n} = require('./lib/command');\n\nconst DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;\n\nconst getEnv = _ref => {\n  let {\n    env: envOption,\n    extendEnv,\n    preferLocal,\n    localDir,\n    execPath\n  } = _ref;\n  const env = extendEnv ? { ...process.env,\n    ...envOption\n  } : envOption;\n\n  if (preferLocal) {\n    return npmRunPath.env({\n      env,\n      cwd: localDir,\n      execPath\n    });\n  }\n\n  return env;\n};\n\nconst handleArguments = function (file, args) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  const parsed = crossSpawn._parse(file, args, options);\n\n  file = parsed.command;\n  args = parsed.args;\n  options = parsed.options;\n  options = {\n    maxBuffer: DEFAULT_MAX_BUFFER,\n    buffer: true,\n    stripFinalNewline: true,\n    extendEnv: true,\n    preferLocal: false,\n    localDir: options.cwd || process.cwd(),\n    execPath: process.execPath,\n    encoding: 'utf8',\n    reject: true,\n    cleanup: true,\n    all: false,\n    windowsHide: true,\n    ...options\n  };\n  options.env = getEnv(options);\n  options.stdio = normalizeStdio(options);\n\n  if (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {\n    // #116\n    args.unshift('/q');\n  }\n\n  return {\n    file,\n    args,\n    options,\n    parsed\n  };\n};\n\nconst handleOutput = (options, value, error) => {\n  if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n    // When `execa.sync()` errors, we normalize it to '' to mimic `execa()`\n    return error === undefined ? undefined : '';\n  }\n\n  if (options.stripFinalNewline) {\n    return stripFinalNewline(value);\n  }\n\n  return value;\n};\n\nconst execa = (file, args, options) => {\n  const parsed = handleArguments(file, args, options);\n  const command = joinCommand(file, args);\n  const escapedCommand = getEscapedCommand(file, args);\n  validateTimeout(parsed.options);\n  let spawned;\n\n  try {\n    spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);\n  } catch (error) {\n    // Ensure the returned error is always both a promise and a child process\n    const dummySpawned = new childProcess.ChildProcess();\n    const errorPromise = Promise.reject(makeError({\n      error,\n      stdout: '',\n      stderr: '',\n      all: '',\n      command,\n      escapedCommand,\n      parsed,\n      timedOut: false,\n      isCanceled: false,\n      killed: false\n    }));\n    return mergePromise(dummySpawned, errorPromise);\n  }\n\n  const spawnedPromise = getSpawnedPromise(spawned);\n  const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);\n  const processDone = setExitHandler(spawned, parsed.options, timedPromise);\n  const context = {\n    isCanceled: false\n  };\n  spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));\n  spawned.cancel = spawnedCancel.bind(null, spawned, context);\n\n  const handlePromise = async () => {\n    const [{\n      error,\n      exitCode,\n      signal,\n      timedOut\n    }, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);\n    const stdout = handleOutput(parsed.options, stdoutResult);\n    const stderr = handleOutput(parsed.options, stderrResult);\n    const all = handleOutput(parsed.options, allResult);\n\n    if (error || exitCode !== 0 || signal !== null) {\n      const returnedError = makeError({\n        error,\n        exitCode,\n        signal,\n        stdout,\n        stderr,\n        all,\n        command,\n        escapedCommand,\n        parsed,\n        timedOut,\n        isCanceled: context.isCanceled,\n        killed: spawned.killed\n      });\n\n      if (!parsed.options.reject) {\n        return returnedError;\n      }\n\n      throw returnedError;\n    }\n\n    return {\n      command,\n      escapedCommand,\n      exitCode: 0,\n      stdout,\n      stderr,\n      all,\n      failed: false,\n      timedOut: false,\n      isCanceled: false,\n      killed: false\n    };\n  };\n\n  const handlePromiseOnce = onetime(handlePromise);\n  handleInput(spawned, parsed.options.input);\n  spawned.all = makeAllStream(spawned, parsed.options);\n  return mergePromise(spawned, handlePromiseOnce);\n};\n\nmodule.exports = execa;\n\nmodule.exports.sync = (file, args, options) => {\n  const parsed = handleArguments(file, args, options);\n  const command = joinCommand(file, args);\n  const escapedCommand = getEscapedCommand(file, args);\n  validateInputSync(parsed.options);\n  let result;\n\n  try {\n    result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);\n  } catch (error) {\n    throw makeError({\n      error,\n      stdout: '',\n      stderr: '',\n      all: '',\n      command,\n      escapedCommand,\n      parsed,\n      timedOut: false,\n      isCanceled: false,\n      killed: false\n    });\n  }\n\n  const stdout = handleOutput(parsed.options, result.stdout, result.error);\n  const stderr = handleOutput(parsed.options, result.stderr, result.error);\n\n  if (result.error || result.status !== 0 || result.signal !== null) {\n    const error = makeError({\n      stdout,\n      stderr,\n      error: result.error,\n      signal: result.signal,\n      exitCode: result.status,\n      command,\n      escapedCommand,\n      parsed,\n      timedOut: result.error && result.error.code === 'ETIMEDOUT',\n      isCanceled: false,\n      killed: result.signal !== null\n    });\n\n    if (!parsed.options.reject) {\n      return error;\n    }\n\n    throw error;\n  }\n\n  return {\n    command,\n    escapedCommand,\n    exitCode: 0,\n    stdout,\n    stderr,\n    failed: false,\n    timedOut: false,\n    isCanceled: false,\n    killed: false\n  };\n};\n\nmodule.exports.command = (command, options) => {\n  const [file, ...args] = parseCommand(command);\n  return execa(file, args, options);\n};\n\nmodule.exports.commandSync = (command, options) => {\n  const [file, ...args] = parseCommand(command);\n  return execa.sync(file, args, options);\n};\n\nmodule.exports.node = function (scriptPath, args) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (args && !Array.isArray(args) && typeof args === 'object') {\n    options = args;\n    args = [];\n  }\n\n  const stdio = normalizeStdio.node(options);\n  const defaultExecArgv = process.execArgv.filter(arg => !arg.startsWith('--inspect'));\n  const {\n    nodePath = process.execPath,\n    nodeOptions = defaultExecArgv\n  } = options;\n  return execa(nodePath, [...nodeOptions, scriptPath, ...(Array.isArray(args) ? args : [])], { ...options,\n    stdin: undefined,\n    stdout: undefined,\n    stderr: undefined,\n    stdio,\n    shell: false\n  });\n};","map":{"version":3,"sources":["/home/flic/test/node_modules/default-gateway/node_modules/execa/index.js"],"names":["path","require","childProcess","crossSpawn","stripFinalNewline","npmRunPath","onetime","makeError","normalizeStdio","spawnedKill","spawnedCancel","setupTimeout","validateTimeout","setExitHandler","handleInput","getSpawnedResult","makeAllStream","validateInputSync","mergePromise","getSpawnedPromise","joinCommand","parseCommand","getEscapedCommand","DEFAULT_MAX_BUFFER","getEnv","env","envOption","extendEnv","preferLocal","localDir","execPath","process","cwd","handleArguments","file","args","options","parsed","_parse","command","maxBuffer","buffer","encoding","reject","cleanup","all","windowsHide","stdio","platform","basename","unshift","handleOutput","value","error","Buffer","isBuffer","undefined","execa","escapedCommand","spawned","spawn","dummySpawned","ChildProcess","errorPromise","Promise","stdout","stderr","timedOut","isCanceled","killed","spawnedPromise","timedPromise","processDone","context","kill","bind","cancel","handlePromise","exitCode","signal","stdoutResult","stderrResult","allResult","returnedError","failed","handlePromiseOnce","input","module","exports","sync","result","spawnSync","status","code","commandSync","node","scriptPath","Array","isArray","defaultExecArgv","execArgv","filter","arg","startsWith","nodePath","nodeOptions","stdin","shell"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst childProcess = require('child_process');\nconst crossSpawn = require('cross-spawn');\nconst stripFinalNewline = require('strip-final-newline');\nconst npmRunPath = require('npm-run-path');\nconst onetime = require('onetime');\nconst makeError = require('./lib/error');\nconst normalizeStdio = require('./lib/stdio');\nconst {spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler} = require('./lib/kill');\nconst {handleInput, getSpawnedResult, makeAllStream, validateInputSync} = require('./lib/stream');\nconst {mergePromise, getSpawnedPromise} = require('./lib/promise');\nconst {joinCommand, parseCommand, getEscapedCommand} = require('./lib/command');\n\nconst DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;\n\nconst getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {\n\tconst env = extendEnv ? {...process.env, ...envOption} : envOption;\n\n\tif (preferLocal) {\n\t\treturn npmRunPath.env({env, cwd: localDir, execPath});\n\t}\n\n\treturn env;\n};\n\nconst handleArguments = (file, args, options = {}) => {\n\tconst parsed = crossSpawn._parse(file, args, options);\n\tfile = parsed.command;\n\targs = parsed.args;\n\toptions = parsed.options;\n\n\toptions = {\n\t\tmaxBuffer: DEFAULT_MAX_BUFFER,\n\t\tbuffer: true,\n\t\tstripFinalNewline: true,\n\t\textendEnv: true,\n\t\tpreferLocal: false,\n\t\tlocalDir: options.cwd || process.cwd(),\n\t\texecPath: process.execPath,\n\t\tencoding: 'utf8',\n\t\treject: true,\n\t\tcleanup: true,\n\t\tall: false,\n\t\twindowsHide: true,\n\t\t...options\n\t};\n\n\toptions.env = getEnv(options);\n\n\toptions.stdio = normalizeStdio(options);\n\n\tif (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {\n\t\t// #116\n\t\targs.unshift('/q');\n\t}\n\n\treturn {file, args, options, parsed};\n};\n\nconst handleOutput = (options, value, error) => {\n\tif (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n\t\t// When `execa.sync()` errors, we normalize it to '' to mimic `execa()`\n\t\treturn error === undefined ? undefined : '';\n\t}\n\n\tif (options.stripFinalNewline) {\n\t\treturn stripFinalNewline(value);\n\t}\n\n\treturn value;\n};\n\nconst execa = (file, args, options) => {\n\tconst parsed = handleArguments(file, args, options);\n\tconst command = joinCommand(file, args);\n\tconst escapedCommand = getEscapedCommand(file, args);\n\n\tvalidateTimeout(parsed.options);\n\n\tlet spawned;\n\ttry {\n\t\tspawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);\n\t} catch (error) {\n\t\t// Ensure the returned error is always both a promise and a child process\n\t\tconst dummySpawned = new childProcess.ChildProcess();\n\t\tconst errorPromise = Promise.reject(makeError({\n\t\t\terror,\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t}));\n\t\treturn mergePromise(dummySpawned, errorPromise);\n\t}\n\n\tconst spawnedPromise = getSpawnedPromise(spawned);\n\tconst timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);\n\tconst processDone = setExitHandler(spawned, parsed.options, timedPromise);\n\n\tconst context = {isCanceled: false};\n\n\tspawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));\n\tspawned.cancel = spawnedCancel.bind(null, spawned, context);\n\n\tconst handlePromise = async () => {\n\t\tconst [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);\n\t\tconst stdout = handleOutput(parsed.options, stdoutResult);\n\t\tconst stderr = handleOutput(parsed.options, stderrResult);\n\t\tconst all = handleOutput(parsed.options, allResult);\n\n\t\tif (error || exitCode !== 0 || signal !== null) {\n\t\t\tconst returnedError = makeError({\n\t\t\t\terror,\n\t\t\t\texitCode,\n\t\t\t\tsignal,\n\t\t\t\tstdout,\n\t\t\t\tstderr,\n\t\t\t\tall,\n\t\t\t\tcommand,\n\t\t\t\tescapedCommand,\n\t\t\t\tparsed,\n\t\t\t\ttimedOut,\n\t\t\t\tisCanceled: context.isCanceled,\n\t\t\t\tkilled: spawned.killed\n\t\t\t});\n\n\t\t\tif (!parsed.options.reject) {\n\t\t\t\treturn returnedError;\n\t\t\t}\n\n\t\t\tthrow returnedError;\n\t\t}\n\n\t\treturn {\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\texitCode: 0,\n\t\t\tstdout,\n\t\t\tstderr,\n\t\t\tall,\n\t\t\tfailed: false,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t};\n\t};\n\n\tconst handlePromiseOnce = onetime(handlePromise);\n\n\thandleInput(spawned, parsed.options.input);\n\n\tspawned.all = makeAllStream(spawned, parsed.options);\n\n\treturn mergePromise(spawned, handlePromiseOnce);\n};\n\nmodule.exports = execa;\n\nmodule.exports.sync = (file, args, options) => {\n\tconst parsed = handleArguments(file, args, options);\n\tconst command = joinCommand(file, args);\n\tconst escapedCommand = getEscapedCommand(file, args);\n\n\tvalidateInputSync(parsed.options);\n\n\tlet result;\n\ttry {\n\t\tresult = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);\n\t} catch (error) {\n\t\tthrow makeError({\n\t\t\terror,\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t});\n\t}\n\n\tconst stdout = handleOutput(parsed.options, result.stdout, result.error);\n\tconst stderr = handleOutput(parsed.options, result.stderr, result.error);\n\n\tif (result.error || result.status !== 0 || result.signal !== null) {\n\t\tconst error = makeError({\n\t\t\tstdout,\n\t\t\tstderr,\n\t\t\terror: result.error,\n\t\t\tsignal: result.signal,\n\t\t\texitCode: result.status,\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: result.error && result.error.code === 'ETIMEDOUT',\n\t\t\tisCanceled: false,\n\t\t\tkilled: result.signal !== null\n\t\t});\n\n\t\tif (!parsed.options.reject) {\n\t\t\treturn error;\n\t\t}\n\n\t\tthrow error;\n\t}\n\n\treturn {\n\t\tcommand,\n\t\tescapedCommand,\n\t\texitCode: 0,\n\t\tstdout,\n\t\tstderr,\n\t\tfailed: false,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t};\n};\n\nmodule.exports.command = (command, options) => {\n\tconst [file, ...args] = parseCommand(command);\n\treturn execa(file, args, options);\n};\n\nmodule.exports.commandSync = (command, options) => {\n\tconst [file, ...args] = parseCommand(command);\n\treturn execa.sync(file, args, options);\n};\n\nmodule.exports.node = (scriptPath, args, options = {}) => {\n\tif (args && !Array.isArray(args) && typeof args === 'object') {\n\t\toptions = args;\n\t\targs = [];\n\t}\n\n\tconst stdio = normalizeStdio.node(options);\n\tconst defaultExecArgv = process.execArgv.filter(arg => !arg.startsWith('--inspect'));\n\n\tconst {\n\t\tnodePath = process.execPath,\n\t\tnodeOptions = defaultExecArgv\n\t} = options;\n\n\treturn execa(\n\t\tnodePath,\n\t\t[\n\t\t\t...nodeOptions,\n\t\t\tscriptPath,\n\t\t\t...(Array.isArray(args) ? args : [])\n\t\t],\n\t\t{\n\t\t\t...options,\n\t\t\tstdin: undefined,\n\t\t\tstdout: undefined,\n\t\t\tstderr: undefined,\n\t\t\tstdio,\n\t\t\tshell: false\n\t\t}\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}