{"ast":null,"code":"\"use strict\";\n\nconst {\n  platform,\n  type\n} = require(\"os\");\n\nconst supportedPlatforms = new Set([\"aix\", \"android\", \"darwin\", \"freebsd\", \"linux\", \"openbsd\", \"sunos\", \"win32\"]);\nconst plat = platform();\n\nif (supportedPlatforms.has(plat)) {\n  let file = plat;\n\n  if (plat === \"aix\") {\n    file = type() === \"OS400\" ? \"ibmi\" : \"sunos\"; // AIX `netstat` output is compatible with Solaris\n  }\n\n  const m = require(`./${file}.js`);\n\n  module.exports.v4 = () => m.v4();\n\n  module.exports.v6 = () => m.v6();\n\n  module.exports.v4.sync = () => m.v4.sync();\n\n  module.exports.v6.sync = () => m.v6.sync();\n} else {\n  const err = new Error(`Unsupported Platform: ${plat}`);\n\n  module.exports.v4 = () => Promise.reject(err);\n\n  module.exports.v6 = () => Promise.reject(err);\n\n  module.exports.v4.sync = () => {\n    throw err;\n  };\n\n  module.exports.v6.sync = () => {\n    throw err;\n  };\n}","map":{"version":3,"sources":["/home/flic/test/node_modules/default-gateway/index.js"],"names":["platform","type","require","supportedPlatforms","Set","plat","has","file","m","module","exports","v4","v6","sync","err","Error","Promise","reject"],"mappings":"AAAA;;AAEA,MAAM;AAACA,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAmBC,OAAO,CAAC,IAAD,CAAhC;;AAEA,MAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CACjC,KADiC,EAEjC,SAFiC,EAGjC,QAHiC,EAIjC,SAJiC,EAKjC,OALiC,EAMjC,SANiC,EAOjC,OAPiC,EAQjC,OARiC,CAAR,CAA3B;AAWA,MAAMC,IAAI,GAAGL,QAAQ,EAArB;;AAEA,IAAIG,kBAAkB,CAACG,GAAnB,CAAuBD,IAAvB,CAAJ,EAAkC;AAChC,MAAIE,IAAI,GAAGF,IAAX;;AACA,MAAIA,IAAI,KAAK,KAAb,EAAoB;AAClBE,IAAAA,IAAI,GAAGN,IAAI,OAAO,OAAX,GAAqB,MAArB,GAA8B,OAArC,CADkB,CAC4B;AAC/C;;AAED,QAAMO,CAAC,GAAGN,OAAO,CAAE,KAAIK,IAAK,KAAX,CAAjB;;AACAE,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB,MAAMH,CAAC,CAACG,EAAF,EAA1B;;AACAF,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB,MAAMJ,CAAC,CAACI,EAAF,EAA1B;;AACAH,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBE,IAAlB,GAAyB,MAAML,CAAC,CAACG,EAAF,CAAKE,IAAL,EAA/B;;AACAJ,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBC,IAAlB,GAAyB,MAAML,CAAC,CAACI,EAAF,CAAKC,IAAL,EAA/B;AACD,CAXD,MAWO;AACL,QAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAW,yBAAwBV,IAAK,EAAxC,CAAZ;;AACAI,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB,MAAMK,OAAO,CAACC,MAAR,CAAeH,GAAf,CAA1B;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB,MAAMI,OAAO,CAACC,MAAR,CAAeH,GAAf,CAA1B;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBE,IAAlB,GAAyB,MAAM;AAAE,UAAMC,GAAN;AAAY,GAA7C;;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBC,IAAlB,GAAyB,MAAM;AAAE,UAAMC,GAAN;AAAY,GAA7C;AACD","sourcesContent":["\"use strict\";\n\nconst {platform, type} = require(\"os\");\n\nconst supportedPlatforms = new Set([\n  \"aix\",\n  \"android\",\n  \"darwin\",\n  \"freebsd\",\n  \"linux\",\n  \"openbsd\",\n  \"sunos\",\n  \"win32\"\n]);\n\nconst plat = platform();\n\nif (supportedPlatforms.has(plat)) {\n  let file = plat;\n  if (plat === \"aix\") {\n    file = type() === \"OS400\" ? \"ibmi\" : \"sunos\"; // AIX `netstat` output is compatible with Solaris\n  }\n\n  const m = require(`./${file}.js`);\n  module.exports.v4 = () => m.v4();\n  module.exports.v6 = () => m.v6();\n  module.exports.v4.sync = () => m.v4.sync();\n  module.exports.v6.sync = () => m.v6.sync();\n} else {\n  const err = new Error(`Unsupported Platform: ${plat}`);\n  module.exports.v4 = () => Promise.reject(err);\n  module.exports.v6 = () => Promise.reject(err);\n  module.exports.v4.sync = () => { throw err; };\n  module.exports.v6.sync = () => { throw err; };\n}\n"]},"metadata":{},"sourceType":"script"}