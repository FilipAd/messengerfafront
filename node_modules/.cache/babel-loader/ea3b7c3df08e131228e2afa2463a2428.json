{"ast":null,"code":"'use strict';\n\nconst aliases = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = options => aliases.some(alias => options[alias] !== undefined);\n\nconst normalizeStdio = options => {\n  if (!options) {\n    return;\n  }\n\n  const {\n    stdio\n  } = options;\n\n  if (stdio === undefined) {\n    return aliases.map(alias => options[alias]);\n  }\n\n  if (hasAlias(options)) {\n    throw new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${aliases.map(alias => `\\`${alias}\\``).join(', ')}`);\n  }\n\n  if (typeof stdio === 'string') {\n    return stdio;\n  }\n\n  if (!Array.isArray(stdio)) {\n    throw new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n  }\n\n  const length = Math.max(stdio.length, aliases.length);\n  return Array.from({\n    length\n  }, (value, index) => stdio[index]);\n};\n\nmodule.exports = normalizeStdio; // `ipc` is pushed unless it is already present\n\nmodule.exports.node = options => {\n  const stdio = normalizeStdio(options);\n\n  if (stdio === 'ipc') {\n    return 'ipc';\n  }\n\n  if (stdio === undefined || typeof stdio === 'string') {\n    return [stdio, stdio, stdio, 'ipc'];\n  }\n\n  if (stdio.includes('ipc')) {\n    return stdio;\n  }\n\n  return [...stdio, 'ipc'];\n};","map":{"version":3,"sources":["/home/flic/test/node_modules/default-gateway/node_modules/execa/lib/stdio.js"],"names":["aliases","hasAlias","options","some","alias","undefined","normalizeStdio","stdio","map","Error","join","Array","isArray","TypeError","length","Math","max","from","value","index","module","exports","node","includes"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAhB;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,IAAIF,OAAO,CAACG,IAAR,CAAaC,KAAK,IAAIF,OAAO,CAACE,KAAD,CAAP,KAAmBC,SAAzC,CAA5B;;AAEA,MAAMC,cAAc,GAAGJ,OAAO,IAAI;AACjC,MAAI,CAACA,OAAL,EAAc;AACb;AACA;;AAED,QAAM;AAACK,IAAAA;AAAD,MAAUL,OAAhB;;AAEA,MAAIK,KAAK,KAAKF,SAAd,EAAyB;AACxB,WAAOL,OAAO,CAACQ,GAAR,CAAYJ,KAAK,IAAIF,OAAO,CAACE,KAAD,CAA5B,CAAP;AACA;;AAED,MAAIH,QAAQ,CAACC,OAAD,CAAZ,EAAuB;AACtB,UAAM,IAAIO,KAAJ,CAAW,qEAAoET,OAAO,CAACQ,GAAR,CAAYJ,KAAK,IAAK,KAAIA,KAAM,IAAhC,EAAqCM,IAArC,CAA0C,IAA1C,CAAgD,EAA/H,CAAN;AACA;;AAED,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAOA,KAAP;AACA;;AAED,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAL,EAA2B;AAC1B,UAAM,IAAIM,SAAJ,CAAe,mEAAkE,OAAON,KAAM,IAA9F,CAAN;AACA;;AAED,QAAMO,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAST,KAAK,CAACO,MAAf,EAAuBd,OAAO,CAACc,MAA/B,CAAf;AACA,SAAOH,KAAK,CAACM,IAAN,CAAW;AAACH,IAAAA;AAAD,GAAX,EAAqB,CAACI,KAAD,EAAQC,KAAR,KAAkBZ,KAAK,CAACY,KAAD,CAA5C,CAAP;AACA,CAzBD;;AA2BAC,MAAM,CAACC,OAAP,GAAiBf,cAAjB,C,CAEA;;AACAc,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBpB,OAAO,IAAI;AAChC,QAAMK,KAAK,GAAGD,cAAc,CAACJ,OAAD,CAA5B;;AAEA,MAAIK,KAAK,KAAK,KAAd,EAAqB;AACpB,WAAO,KAAP;AACA;;AAED,MAAIA,KAAK,KAAKF,SAAV,IAAuB,OAAOE,KAAP,KAAiB,QAA5C,EAAsD;AACrD,WAAO,CAACA,KAAD,EAAQA,KAAR,EAAeA,KAAf,EAAsB,KAAtB,CAAP;AACA;;AAED,MAAIA,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC1B,WAAOhB,KAAP;AACA;;AAED,SAAO,CAAC,GAAGA,KAAJ,EAAW,KAAX,CAAP;AACA,CAhBD","sourcesContent":["'use strict';\nconst aliases = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = options => aliases.some(alias => options[alias] !== undefined);\n\nconst normalizeStdio = options => {\n\tif (!options) {\n\t\treturn;\n\t}\n\n\tconst {stdio} = options;\n\n\tif (stdio === undefined) {\n\t\treturn aliases.map(alias => options[alias]);\n\t}\n\n\tif (hasAlias(options)) {\n\t\tthrow new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${aliases.map(alias => `\\`${alias}\\``).join(', ')}`);\n\t}\n\n\tif (typeof stdio === 'string') {\n\t\treturn stdio;\n\t}\n\n\tif (!Array.isArray(stdio)) {\n\t\tthrow new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n\t}\n\n\tconst length = Math.max(stdio.length, aliases.length);\n\treturn Array.from({length}, (value, index) => stdio[index]);\n};\n\nmodule.exports = normalizeStdio;\n\n// `ipc` is pushed unless it is already present\nmodule.exports.node = options => {\n\tconst stdio = normalizeStdio(options);\n\n\tif (stdio === 'ipc') {\n\t\treturn 'ipc';\n\t}\n\n\tif (stdio === undefined || typeof stdio === 'string') {\n\t\treturn [stdio, stdio, stdio, 'ipc'];\n\t}\n\n\tif (stdio.includes('ipc')) {\n\t\treturn stdio;\n\t}\n\n\treturn [...stdio, 'ipc'];\n};\n"]},"metadata":{},"sourceType":"script"}